function (float)fitnessDistributionPNorm(float x)
{
  return (-(pnorm(x, mean = 0.5, sd = pnormsd))+0.5)*(pnormmaxfitness*2);
}

function (float)fitnessDistributionLinear(float x)
{
  return (-(2*x)+1);
}

initialize() {
  initializeMutationRate(0);
  initializeMutationType("m1", 0.5, "f", 0); // V1 to V het-gene mutation
  initializeMutationType("m2", 0.5, "f", 0); // R to r het-gene mutation
  
  m1.convertToSubstitution = F;
  m1.mutationStackPolicy = "f";
  m2.convertToSubstitution = F;
  m2.mutationStackPolicy = "f";
  
  initializeGenomicElementType("g1", m1, 0); // V1/V loci
  initializeGenomicElementType("g2", m2, 0); // r/R loci
  
  initializeGenomicElement(g1, 0, 0);
  initializeGenomicElement(g2, 1, 1);
  
  initializeRecombinationRate(c(0.5,0.5),c(0,1));
}

1 {
  sim.addSubpop("p1", individuals);
  sim.addSubpop("p2", individuals);
  p1.setSelfingRate(selfing);
  p2.setSelfingRate(1);
  //mutPop = sample(sim.subpopulations.p1, invaders);
  mutPop = p1.sampleIndividuals(invaders);
  mutPop.genome1.addNewMutation(c(m1,m2), c(0.5,0.5), c(0,1));
  mutPop.genome2.addNewMutation(c(m1,m2), c(0.5,0.5), c(0,1));
  
  file = paste("V1R_Frequency, VR_Frequency, V1r_Frequency, Vr_Frequency, TEST", "");
  if (!writeFile("~/SLiM/mutCount.txt", file, append=F))
     stop("Error writing file!");
}

1:400 late() {
  p1.setMigrationRates(p2, 1);
  p2.setMigrationRates(p1, 1);
  
  V1RCount = sum(((p1.individuals.genome1.countOfMutationsOfType(m1) == 0) & (p1.individuals.genome1.countOfMutationsOfType(m2) == 0))) + sum(((p1.individuals.genome2.countOfMutationsOfType(m1) == 0) & (p1.individuals.genome2.countOfMutationsOfType(m2) == 0)));
  VRCount = sum(((p1.individuals.genome1.countOfMutationsOfType(m1) == 1) & (p1.individuals.genome1.countOfMutationsOfType(m2) == 0))) + sum(((p1.individuals.genome2.countOfMutationsOfType(m1) == 1) & (p1.individuals.genome2.countOfMutationsOfType(m2) == 0)));
  V1rCount = sum(((p1.individuals.genome1.countOfMutationsOfType(m1) == 0) & (p1.individuals.genome1.countOfMutationsOfType(m2) == 1))) + sum(((p1.individuals.genome2.countOfMutationsOfType(m1) == 0) & (p1.individuals.genome2.countOfMutationsOfType(m2) == 1)));
  VrCount = sum(((p1.individuals.genome1.countOfMutationsOfType(m1) == 1) & (p1.individuals.genome1.countOfMutationsOfType(m2) == 1))) + sum(((p1.individuals.genome2.countOfMutationsOfType(m1) == 1) & (p1.individuals.genome2.countOfMutationsOfType(m2) == 1)));

  propV1RCount = V1RCount/(individuals*2);
  propVRCount = VRCount/(individuals*2);
  propV1rCount = V1rCount/(individuals*2);
  propVrCount = VrCount/(individuals*2);
  
  test = p1.immigrantSubpopFractions;

  file = paste(c(propV1RCount, ", ", propVRCount, ", ", propV1rCount, ", ", propVrCount, ", ", test), ""); 
  if (!writeFile("~/SLiM/mutCount.txt", file, append=T))
     stop("Error writing file!");
  sim.outputFull();
}

fitness(m1) {
  freqV = (sum(p1.individuals.genome1.countOfMutationsOfType(m1) == 1) + sum(p1.individuals.genome2.countOfMutationsOfType(m1) == 1))/(individuals*2);
  if (pnormOn==1) {
    return fitnessDistributionPNorm(freqV);
  }
  else {
    return fitnessDistributionLinear(freqV);
  }
  
}

modifyChild() {
  deadlyVRgenome = (childGenome1.countOfMutationsOfType(m1) == 1 | childGenome2.countOfMutationsOfType(m1) == 1)  & (childGenome1.countOfMutationsOfType(m2) == 0 | childGenome2.countOfMutationsOfType(m2) == 0);
  VV1interaction = (childGenome1.countOfMutationsOfType(m1) == 0 & childGenome2.countOfMutationsOfType(m1) == 1) | (childGenome1.countOfMutationsOfType(m1) == 1 & childGenome2.countOfMutationsOfType(m1) == 0);
  VRinteraction = (childGenome1.countOfMutationsOfType(m1) == 0 & childGenome1.countOfMutationsOfType(m2) == 1) | (childGenome2.countOfMutationsOfType(m1) == 0 & childGenome2.countOfMutationsOfType(m2) == 1);
  
  if (deadlyVRgenome)
    return F;
  else if (VV1interaction | VRinteraction);
    probability = rdunif(1, 0, 100);
    if (VV1interaction & (probability > V1Vintercation))
      return F;
    if (VRinteraction & (probability > 40))
      return F;
  else
    return T;
} 

/*
200: mateChoice() { 
  VV1interaction = (genome1.countOfMutationsOfType(m1) == 0 & genome2.countOfMutationsOfType(m1) == 1) | (genome1.countOfMutationsOfType(m1) == 1 & genome2.countOfMutationsOfType(m1) == 0);
  VRinteraction = (genome1.countOfMutationsOfType(m1) == 0 & genome1.countOfMutationsOfType(m2) == 1) | (genome2.countOfMutationsOfType(m1) == 0 & genome2.countOfMutationsOfType(m2) == 1);
  deadlyVRgenome = (childGenome1.countOfMutationsOfType(m1) == 1 | childGenome2.countOfMutationsOfType(m1) == 1)  & (childGenome1.countOfMutationsOfType(m2) == 0 | childGenome2.countOfMutationsOfType(m2) == 0);

  if (deadlyV1Rgenome1 | deadlyV1Rgenome2)
    return weights * 0;
  else if (VRinteraction)
    return weight * 0.4;
  else if (VV1interaction)
    fitEffect = -(rdunif(1, 0, 6)/10);
    return weight * fitEffect;
}
*/